{
    "variables": {
        "project": "",
        "environment": "",
        "azure_client_id": "",
        "azure_client_secret": "",
        "azure_tenant_id": "",
        "azure_subscription_id": "",
        "packer_vnet_resource_group_name": "",
        "packer_vnet_name": "",
        "packer_vnet_subnet_name": "",
        "packer_images_resource_group_name": "",
        "packer_image_name": "",
        "ansible_user": "",
        "ansible_user_password": "",
        "var1": "var_from_packer",
        "var2": "{{ vault `/secret/data/var2` `var2`}}",
        "var3": "{{ consul_key `var3` }}"
    },
    "sensitive-variables": [
        "azure_client_id",
        "azure_client_secret",
        "ansible_user_password"
    ],
    "builders": [
        {
            "type": "azure-arm",
            "client_id": "{{user `azure_client_id`}}",
            "client_secret": "{{user `azure_client_secret`}}",
            "tenant_id": "{{user `azure_tenant_id`}}",
            "subscription_id": "{{user `azure_subscription_id`}}",
            "image_publisher": "MicrosoftWindowsServer",
            "image_offer": "WindowsServer",
            "image_sku": "2019-Datacenter",
            "location": "East US",
            "vm_size": "Standard_DS2_v2",
            "os_type": "Windows",
            "communicator": "winrm",
            "winrm_use_ssl": true,
            "winrm_insecure": true,
            "winrm_port": "5986",
            "winrm_timeout": "15m",
            "winrm_username": "packer",
            "virtual_network_name": "{{user `packer_vnet_name`}}",
            "virtual_network_subnet_name": "{{user `packer_vnet_subnet_name`}}",
            "virtual_network_resource_group_name": "{{user `packer_vnet_resource_group_name`}}",
            "azure_tags": {
                "project": "{{user `project`}}",
                "environment": "{{user `environment`}}"
            },
            "managed_image_resource_group_name": "{{user `packer_images_resource_group_name`}}",
            "managed_image_name": "{{user `packer_image_name`}}"
        }
    ],
    "provisioners": [
        {
            "type": "powershell",
            "inline": [
                "$userPwd = ConvertTo-SecureString {{ user `ansible_user_password` }} -AsPlainText -Force",
                "New-LocalUser {{ user `ansible_user` }} -Password $userPwd -FullName {{ user `ansible_user` }} -Description 'Temporary user for Ansible'",
                "Add-LocalGroupMember -Group 'Administrators' -Member {{ user `ansible_user` }}"
            ]
        },
        {
            "type": "powershell",
            "inline": [
                "Invoke-WebRequest https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.ps1",
                "powershell.exe -ExecutionPolicy ByPass -File ./ConfigureRemotingForAnsible.ps1",
                "Remove-Item ./ConfigureRemotingForAnsible.ps1"
            ]
        },
        {
            "type": "powershell",
            "inline": "(Invoke-WebRequest -Headers @{'Metadata' = 'true'} -UseBasicParsing 'http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/privateIpAddress?api-version=2017-08-01&format=text').Content | Out-File -Append -Encoding utf8 C:/Windows/Temp/ip-address"
        },
        {
            "type": "file",
            "direction": "download",
            "source": "C:/Windows/Temp/ip-address",
            "destination": "./hosts"
        },
        {
            "type": "shell-local",
            "inline": [
                "IP=`cut -b 4- hosts`",
                "echo \"[all]\\n${IP}\" > hosts"
            ]
        },
        {
            "type": "shell-local",
            "command": "ansible-playbook -vvvv -i hosts ansible/build-playbook.yml --extra-vars='ansible_user={{ user `ansible_user` }} ansible_password={{ user `ansible_user_password` }} ansible_connection=winrm ansible_winrm_server_cert_validation=ignore ansible_shell_type=powershell ansible_shell_executable=None var1={{ user `var1` }} var2={{ user `var2` }} var3={{ user `var3` }}' "
        },
        {
            "type": "shell-local",
            "command": "rm -f ./hosts"
        },
        {
            "type": "powershell",
            "inline": [
                "Remove-LocalUser {{ user `ansible_user` }}"
            ]
        },
        {
            "type": "powershell",
            "inline": [
                "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit",
                "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"
            ]
        }
    ]
}

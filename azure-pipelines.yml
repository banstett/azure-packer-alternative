resources:
- repo: self
  clean: true

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - template.json
    - ansible/*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - template.json
    - ansible/*
    - azure-pipelines.yml

variables:
- group: azure-connection
- group: azure-tags
- group: azure-packer-resources
- group: azure-prod-network
- group: ansible-windows-creds

stages:
- stage: prod_build
  condition: ne(variables['Build.Reason'], 'PullRequest')
  variables:
  - group: ansible-build-common
  jobs:
  - template: templates/build.yml
    parameters:
      name: 'build_vm1'
      variable_group1: 'azure-prod-vm1'
      variable_group2: 'ansible-build-vm1'
      template_path: 'template.json'
      vm_name: '$(prodVm1Name)'
      ansible_playbook_path: ansible/$(prodVm1Name)/build-playbook.yml
      ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'

  - template: templates/build.yml
    parameters:
      name: 'build_vm2'
      variable_group1: 'azure-prod-vm2'
      variable_group2: 'ansible-build-vm2'
      template_path: 'template.json'
      vm_name: '$(prodVm2Name)'
      ansible_playbook_path: ansible/$(prodVm2Name)/build-playbook.yml
      ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'

  - template: templates/build.yml
    parameters:
      name: 'build_vm3'
      variable_group1: 'azure-prod-vm3'
      variable_group2: 'ansible-build-vm3'
      template_path: 'template.json'
      vm_name: '$(prodVm3Name)'
      ansible_playbook_path: ansible/$(prodVm3Name)/build-playbook.yml
      ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'

- stage: prod_deploy
  condition: ne(variables['Build.Reason'], 'PullRequest')
  variables:
  - group: ansible-deploy-common
  - group: azure-prod-vm1
  - group: azure-prod-vm2
  - group: azure-prod-vm3
  jobs:
  - template: templates/deploy.yml
    parameters:
      environment: 'sbx'
      vm1_name: '$(prodVm1Name)'
      vm2_name: '$(prodVm2Name)'
      vm3_name: '$(prodVm3Name)'
      vm1_rg_name: '$(prodVm1ResourceGroupName)'
      vm2_rg_name: '$(prodVm2ResourceGroupName)'
      vm3_rg_name: '$(prodVm3ResourceGroupName)'
      vm1_kv_name: '$(prodVm1KvName)'
      vm2_kv_name: '$(prodVm2KvName)'
      vm3_kv_name: '$(prodVm3KvName)'
      vm1_size: '$(prodVm1Size)'
      vm2_size: '$(prodVm2Size)'
      vm3_size: '$(prodVm3Size)'
      vm1_ansible_playbook_path: 'ansible/$(prodVm1Name)/release-playbook.yml'
      vm2_ansible_playbook_path: 'ansible/$(prodVm2Name)/release-playbook.yml'
      vm3_ansible_playbook_path: 'ansible/$(prodVm3Name)/release-playbook.yml'

- stage: prv_env_prepare
  condition: eq(variables['System.PullRequest.TargetBranch'], 'master')
  variables:
  - group: azure-prod-vm1
  - group: azure-prod-vm2
  - group: azure-prod-vm3
  jobs:
  - job: create_vm1_rg
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/prepare.yml
      parameters:
        rg_name: '$(prodVm1ResourceGroupName)-prv'
  - job: create_vm2_rg
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/prepare.yml
      parameters:
        rg_name: '$(prodVm2ResourceGroupName)-prv'
  - job: create_vm3_rg
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/prepare.yml
      parameters:
        rg_name: '$(prodVm3ResourceGroupName)-prv'

# - stage: prv_build
#   condition: eq(variables['System.PullRequest.TargetBranch'], 'master')
#   variables:
#   - group: ansible-build-common
#   jobs:

#   - template: templates/build.yml
#     parameters:
#       name: 'build_vm1'
#       variable_group1: 'azure-prod-vm1'
#       variable_group2: 'ansible-build-vm1'
#       template_path: 'template.json'
#       build_container: 'kagarlickij/packer-ansible-azure-docker-runtime:2.0.0'
#       vm_name: '$(prodVm1Name)-prv'
#       ansible_playbook_path: ansible/$(prodVm1Name)/build-playbook.yml
#       ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'

#   - template: templates/build.yml
#     parameters:
#       name: 'build_vm2'
#       variable_group1: 'azure-prod-vm2'
#       variable_group2: 'ansible-build-vm2'
#       template_path: 'template.json'
#       build_container: 'kagarlickij/packer-ansible-azure-docker-runtime:2.0.0'
#       vm_name: '$(prodVm2Name)-prv'
#       ansible_playbook_path: ansible/$(prodVm2Name)/build-playbook.yml
#       ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'

#   - template: templates/build.yml
#     parameters:
#       name: 'build_vm3'
#       variable_group1: 'azure-prod-vm3'
#       variable_group2: 'ansible-build-vm3'
#       template_path: 'template.json'
#       build_container: 'kagarlickij/packer-ansible-azure-docker-runtime:2.0.0'
#       vm_name: '$(prodVm3Name)-prv'
#       ansible_playbook_path: ansible/$(prodVm3Name)/build-playbook.yml
#       ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'

- stage: prv_deploy
  condition: eq(variables['System.PullRequest.TargetBranch'], 'master')
  variables:
  - group: ansible-deploy-common
  - group: azure-prod-vm1
  - group: azure-prod-vm2
  - group: azure-prod-vm3
  jobs:
  - template: templates/deploy.yml
    parameters:
      environment: 'sbx-prv'
      vm1_name: '$(prodVm1Name)-prv'
      vm2_name: '$(prodVm2Name)-prv'
      vm3_name: '$(prodVm3Name)-prv'
      vm1_rg_name: '$(prodVm1ResourceGroupName)-prv'
      vm2_rg_name: '$(prodVm2ResourceGroupName)-prv'
      vm3_rg_name: '$(prodVm3ResourceGroupName)-prv'
      vm1_kv_name: '$(prodVm1KvName)-prv'
      vm2_kv_name: '$(prodVm2KvName)-prv'
      vm3_kv_name: '$(prodVm3KvName)-prv'
      vm1_size: '$(prodVm1Size)'
      vm2_size: '$(prodVm2Size)'
      vm3_size: '$(prodVm3Size)'
      vm1_ansible_playbook_path: 'ansible/$(prodVm1Name)/release-playbook.yml'
      vm2_ansible_playbook_path: 'ansible/$(prodVm2Name)/release-playbook.yml'
      vm3_ansible_playbook_path: 'ansible/$(prodVm3Name)/release-playbook.yml'

- stage: prv_env_cleanup
  condition: eq(variables['System.PullRequest.TargetBranch'], 'master')
  variables:
  - group: azure-prod-vm1
  - group: azure-prod-vm2
  - group: azure-prod-vm3
  jobs:
  - job: cleanup_vm1
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/cleanup.yml
      parameters:
        vm_name: $(prodVm1Name)-prv
        rg_name: '$(prodVm1ResourceGroupName)-prv'

  - job: cleanup_vm2
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/cleanup.yml
      parameters:
        vm_name: $(prodVm2Name)-prv
        rg_name: '$(prodVm2ResourceGroupName)-prv'

  - job: cleanup_vm3
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/cleanup.yml
      parameters:
        vm_name: $(prodVm3Name)-prv
        rg_name: '$(prodVm3ResourceGroupName)-prv'

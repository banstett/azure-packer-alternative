resources:
- repo: self
  clean: true

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - template.json
    - ansible/*

pr:
  branches:
    include:
    - master
  paths:
    include:
    - template.json
    - ansible/*
    - azure-pipelines.yml

variables:
- group: azure-connection
- group: azure-tags
- group: azure-packer-resources
- group: azure-prod-network
- group: ansible-windows-creds

stages:
- stage: prod_build
  condition: ne(variables['Build.Reason'], 'PullRequest')
  variables:
  - group: ansible-build-common
  jobs:
  - job: build_vm1
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm1
    - group: ansible-build-vm1
    steps:
    - template: templates/build.yml
      parameters:
        vm_name: '$(prodVm1Name)'
        template_path: 'template.json'
        ansible_playbook_path: ansible/$(prodVm1Name)/build-playbook.yml
        ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'
  - job: build_vm2
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm2
    - group: ansible-build-vm2
    steps:
    - template: templates/build.yml
      parameters:
        vm_name: '$(prodVm2Name)'
        template_path: 'template.json'
        ansible_playbook_path: ansible/$(prodVm2Name)/build-playbook.yml
        ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'
  - job: build_vm3
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm3
    - group: ansible-build-vm3
    steps:
    - template: templates/build.yml
      parameters:
        vm_name: '$(prodVm3Name)'
        template_path: 'template.json'
        ansible_playbook_path: ansible/$(prodVm2Name)/build-playbook.yml
        ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'

- stage: prod_deploy
  condition: ne(variables['Build.Reason'], 'PullRequest')
  variables:
  - group: azure-prod-vm1
  - group: azure-prod-vm2
  - group: azure-prod-vm3
  jobs:
  - template: templates/deploy.yml
    parameters:
      environment: 'sbx'
      variable_group: ansible-deploy-common
      vm1_name: '$(prodVm1Name)'
      vm2_name: '$(prodVm2Name)'
      vm3_name: '$(prodVm3Name)'
      vm1_rg_name: '$(prodVm1ResourceGroupName)'
      vm2_rg_name: '$(prodVm2ResourceGroupName)'
      vm3_rg_name: '$(prodVm3ResourceGroupName)'
      vm1_kv_name: '$(prodVm1KvName)'
      vm2_kv_name: '$(prodVm2KvName)'
      vm3_kv_name: '$(prodVm3KvName)'
      vm1_size: '$(prodVm1Size)'
      vm2_size: '$(prodVm2Size)'
      vm3_size: '$(prodVm3Size)'
      vm1_ansible_playbook_path: 'ansible/$(prodVm1Name)/release-playbook.yml'
      vm2_ansible_playbook_path: 'ansible/$(prodVm2Name)/release-playbook.yml'
      vm3_ansible_playbook_path: 'ansible/$(prodVm3Name)/release-playbook.yml'

- stage: prv
  condition: eq(variables['System.PullRequest.TargetBranch'], 'master')
  variables:
  - group: azure-prod-vm1
  - group: azure-prod-vm2
  - group: azure-prod-vm3
  jobs:
  - job: create_vm1_rg
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/prepare.yml
      parameters:
        rg_name: '$(prodVm1ResourceGroupName)-prv'
  - job: create_vm2_rg
    dependsOn: create_vm1_rg
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/prepare.yml
      parameters:
        rg_name: '$(prodVm2ResourceGroupName)-prv'
  - job: create_vm3_rg
    dependsOn: create_vm2_rg
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    steps:
    - template: templates/prepare.yml
      parameters:
        rg_name: '$(prodVm3ResourceGroupName)-prv'

  - job: build_vm1
    dependsOn: create_vm3_rg
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm1
    - group: ansible-build-vm1
    - group: ansible-build-common
    steps:
    - template: templates/build.yml
      parameters:
        vm_name: '$(prodVm1Name)-prv'
        template_path: 'template.json'
        ansible_playbook_path: ansible/$(prodVm1Name)/build-playbook.yml
        ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'
  - job: build_vm2
    dependsOn: build_vm1
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm2
    - group: ansible-build-vm2
    - group: ansible-build-common
    steps:
    - template: templates/build.yml
      parameters:
        vm_name: '$(prodVm2Name)-prv'
        template_path: 'template.json'
        ansible_playbook_path: ansible/$(prodVm2Name)/build-playbook.yml
        ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'
  - job: build_vm3
    dependsOn: build_vm2
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm3
    - group: ansible-build-vm3
    - group: ansible-build-common
    steps:
    - template: templates/build.yml
      parameters:
        vm_name: '$(prodVm3Name)-prv'
        template_path: 'template.json'
        ansible_playbook_path: ansible/$(prodVm3Name)/build-playbook.yml
        ansible_extra_vars: 'ansible_user=$(ansibleUser) ansible_password=$(ansibleUserPass) ansible_connection=winrm ansible_winrm_server_cert_validation=ignore var1=$(var1) var2=$(var2) var3=$(var3) var4=$(var4)'


  - deployment: deploy_vm1
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: ansible-deploy-vm1
    - group: ansible-deploy-common
    environment: sbx-prv
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: >
                az vm create
                --resource-group '$(prodVm1ResourceGroupName)-prv'
                --name '$(prodVm1Name)-prv'
                --image '/subscriptions/$(azureSubscriptionId)/resourceGroups/$(packerImagesResourceGroupName)/providers/Microsoft.Compute/images/$(prodVm1Name)-prv'
                --location '$(prodVmRegion)'
                --size '$(prodVm1Size)'
                --subnet '/subscriptions/$(azureSubscriptionId)/resourceGroups/$(prodVnetResourceGroupName)/providers/Microsoft.Network/virtualNetworks/$(prodVnetName)/subnets/$(prodVnetSubnetName)'
                --admin-username '$(ansibleUser)'
                --admin-password '$(ansibleUserPass)'
                --tags 'project=$(project)' 'environment=$(environment)'
              failOnStandardError: true
            name: 'create_vm'
            displayName: 'Create VM'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                VM1_IP=$(az vm list-ip-addresses --resource-group $(prodVm1ResourceGroupName)-prv --name $(prodVm1Name)-prv --query "[].virtualMachine.network.privateIpAddresses[]" --output tsv)
                echo "##vso[task.setvariable variable=VM1_IP;isOutput=true]$VM1_IP"
              failOnStandardError: true
            name: 'get_vm_ip'
            displayName: 'Get VM IP'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                az vm run-command invoke --command-id RunPowerShellScript --resource-group $(prodVm1ResourceGroupName)-prv --name $(prodVm1Name)-prv --scripts 'Invoke-WebRequest https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.ps1; powershell.exe -ExecutionPolicy ByPass -File ./ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert; Remove-Item ./ConfigureRemotingForAnsible.ps1'
              failOnStandardError: true
            name: 'setup_winrm'
            displayName: 'Setup WinRM'

          - bash: |
              echo -e "[all]\n$GET_VM_IP_VM1_IP" > hosts
            name: 'create_ansible_hosts'
            displayName: 'Create Ansible hosts file'

          - bash: >
              ansible-playbook
              -vvvv
              -i hosts
              ansible/$(prodVm1Name)/release-playbook.yml
              --extra-vars='
              ansible_user=$(ansibleUser)
              ansible_password=$(ansibleUserPass)
              ansible_connection=winrm
              ansible_winrm_server_cert_validation=ignore
              var1=$(var1)
              var2=$(var2)
              var3=$(var3)
              var4=$(var4)
              '
            name: 'execute_ansible'
            displayName: 'Execute Ansible provisioner'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                az keyvault create --resource-group $(prodVm1ResourceGroupName)-prv --name $(prodVm1KvName)-prv --location "$(prodVmRegion)" --enabled-for-disk-encryption
                az vm encryption enable --resource-group $(prodVm1ResourceGroupName)-prv --name $(prodVm1Name)-prv --disk-encryption-keyvault $(prodVm1KvName)-prv
              failOnStandardError: true
            name: 'encrypt_vm'
            displayName: 'Encrypt VM'

          - bash: |
              echo "##vso[task.setvariable variable=VM1_IP;isOutput=true]$GET_VM_IP_VM1_IP"
            name: 'export_ip'
            displayName: 'Export VM1 IP address'

  - deployment: deploy_vm2
    timeoutInMinutes: 30
    dependsOn:
    - deploy_vm1
    condition: succeeded()
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: ansible-deploy-vm2
    - group: ansible-deploy-common
    - name: VM1_IP
      value: $[ dependencies.deploy_vm1.outputs['deploy_vm1.export_ip.VM1_IP'] ]
    environment: sbx-prv
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: >
                az vm create
                --resource-group $(prodVm2ResourceGroupName)-prv
                --name $(prodVm2Name)-prv
                --image '/subscriptions/$(azureSubscriptionId)/resourceGroups/$(packerImagesResourceGroupName)/providers/Microsoft.Compute/images/$(prodVm2Name)-prv'
                --location '$(prodVmRegion)'
                --size '$(prodVm2Size)'
                --subnet '/subscriptions/$(azureSubscriptionId)/resourceGroups/$(prodVnetResourceGroupName)/providers/Microsoft.Network/virtualNetworks/$(prodVnetName)/subnets/$(prodVnetSubnetName)'
                --admin-username '$(ansibleUser)'
                --admin-password '$(ansibleUserPass)'
                --tags 'project=$(project)' 'environment=$(environment)'
              failOnStandardError: true
            name: 'create_vm'
            displayName: 'Create VM'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                VM2_IP=$(az vm list-ip-addresses --resource-group $(prodVm2ResourceGroupName)-prv --name $(prodVm2Name)-prv --query "[].virtualMachine.network.privateIpAddresses[]" --output tsv)
                echo "##vso[task.setvariable variable=VM2_IP;isOutput=true]$VM2_IP"
              failOnStandardError: true
            name: 'get_vm_ip'
            displayName: 'Get VM IP'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                az vm run-command invoke --command-id RunPowerShellScript --resource-group $(prodVm2ResourceGroupName)-prv --name $(prodVm2Name)-prv --scripts 'Invoke-WebRequest https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.ps1; powershell.exe -ExecutionPolicy ByPass -File ./ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert; Remove-Item ./ConfigureRemotingForAnsible.ps1'
              failOnStandardError: true
            name: 'setup_winrm'
            displayName: 'Setup WinRM'

          - bash: |
              echo -e "[all]\n$GET_VM_IP_VM2_IP" > hosts
            name: 'create_ansible_hosts'
            displayName: 'Create Ansible hosts file'

          - bash: >
              ansible-playbook
              -vvvv
              -i hosts
              ansible/$(prodVm2Name)/release-playbook.yml
              --extra-vars='
              ansible_user=$(ansibleUser)
              ansible_password=$(ansibleUserPass)
              ansible_connection=winrm
              ansible_winrm_server_cert_validation=ignore
              var1=$(var1)
              var2=$(var2)
              var3=$(var3)
              var4=$(var4)
              var5=$(VM1_IP)
              '
            name: 'execute_ansible'
            displayName: 'Execute Ansible provisioner'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                az keyvault create --resource-group $(prodVm2ResourceGroupName)-prv --name $(prodVm2KvName)-prv --location "$(prodVmRegion)" --enabled-for-disk-encryption
                az vm encryption enable --resource-group $(prodVm2ResourceGroupName)-prv --name $(prodVm2Name)-prv --disk-encryption-keyvault $(prodVm2KvName)-prv
              failOnStandardError: true
            name: 'encrypt_vm'
            displayName: 'Encrypt VM'

          - bash: |
              echo "##vso[task.setvariable variable=VM2_IP;isOutput=true]$GET_VM_IP_VM2_IP"
            name: 'export_ip'
            displayName: 'Export VM2 IP address'

  - deployment: deploy_vm3
    timeoutInMinutes: 30
    dependsOn:
    - deploy_vm1
    - deploy_vm2
    condition: succeeded()
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: ansible-deploy-vm3
    - group: ansible-deploy-common
    - name: VM1_IP
      value: $[ dependencies.deploy_vm1.outputs['deploy_vm1.export_ip.VM1_IP'] ]
    - name: VM2_IP
      value: $[ dependencies.deploy_vm2.outputs['deploy_vm2.export_ip.VM2_IP'] ]
    environment: sbx-prv
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: >
                az vm create
                --resource-group '$(prodVm3ResourceGroupName)-prv'
                --name '$(prodVm3Name)-prv'
                --image '/subscriptions/$(azureSubscriptionId)/resourceGroups/$(packerImagesResourceGroupName)/providers/Microsoft.Compute/images/$(prodVm3Name)-prv'
                --location '$(prodVmRegion)'
                --size '$(prodVm3Size)'
                --subnet '/subscriptions/$(azureSubscriptionId)/resourceGroups/$(prodVnetResourceGroupName)/providers/Microsoft.Network/virtualNetworks/$(prodVnetName)/subnets/$(prodVnetSubnetName)'
                --admin-username '$(ansibleUser)'
                --admin-password '$(ansibleUserPass)'
                --tags 'project=$(project)' 'environment=$(environment)'
              failOnStandardError: true
            name: 'create_vm'
            displayName: 'Create VM'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                VM3_IP=$(az vm list-ip-addresses --resource-group $(prodVm3ResourceGroupName)-prv --name $(prodVm3Name)-prv --query "[].virtualMachine.network.privateIpAddresses[]" --output tsv)
                echo "##vso[task.setvariable variable=VM3_IP;isOutput=true]$VM3_IP"
              failOnStandardError: true
            name: 'get_vm_ip'
            displayName: 'Get VM IP'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                az vm run-command invoke --command-id RunPowerShellScript --resource-group $(prodVm3ResourceGroupName)-prv --name $(prodVm3Name)-prv --scripts 'Invoke-WebRequest https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.ps1; powershell.exe -ExecutionPolicy ByPass -File ./ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert; Remove-Item ./ConfigureRemotingForAnsible.ps1'
              failOnStandardError: true
            name: 'setup_winrm'
            displayName: 'Setup WinRM'

          - bash: |
              echo -e "[all]\n$GET_VM_IP_VM3_IP" > hosts
            name: 'create_ansible_hosts'
            displayName: 'Create Ansible hosts file'

          - bash: >
              ansible-playbook
              -vvvv
              -i hosts
              ansible/$(prodVm3Name)/release-playbook.yml
              --extra-vars='
              ansible_user=$(ansibleUser)
              ansible_password=$(ansibleUserPass)
              ansible_connection=winrm
              ansible_winrm_server_cert_validation=ignore
              var1=$(var1)
              var2=$(var2)
              var3=$(var3)
              var4=$(var4)
              var5=$(VM1_IP)
              var6=$(VM2_IP)
              '
            name: 'execute_ansible'
            displayName: 'Execute Ansible provisioner'

          - task: AzureCLI@1
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              inlineScript: |
                az keyvault create --resource-group $(prodVm3ResourceGroupName)-prv --name $(prodVm3KvName)-prv --location "$(prodVmRegion)" --enabled-for-disk-encryption
                az vm encryption enable --resource-group $(prodVm3ResourceGroupName)-prv --name $(prodVm3Name)-prv --disk-encryption-keyvault $(prodVm3KvName)-prv
              failOnStandardError: true
            name: 'encrypt_vm'
            displayName: 'Encrypt VM'

          - bash: |
              echo "##vso[task.setvariable variable=VM3_IP;isOutput=true]$GET_VM_IP_VM3_IP"
            name: 'export_ip'
            displayName: 'Export VM3 IP address'


  - job: cleanup_vm1
    dependsOn: deploy_vm3
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm1
    steps:
    - template: templates/cleanup.yml
      parameters:
        vm_name: $(prodVm1Name)-prv
        rg_name: '$(prodVm1ResourceGroupName)-prv'
  - job: cleanup_vm2
    dependsOn: cleanup_vm1
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm1
    steps:
    - template: templates/cleanup.yml
      parameters:
        vm_name: $(prodVm2Name)-prv
        rg_name: '$(prodVm2ResourceGroupName)-prv'
  - job: cleanup_vm3
    dependsOn: cleanup_vm2
    condition: succeeded()
    timeoutInMinutes: 30
    pool:
      name: 'Self-Hosted'
    container: kagarlickij/packer-ansible-azure-docker-runtime:2.0.0
    variables:
    - group: azure-prod-vm1
    steps:
    - template: templates/cleanup.yml
      parameters:
        vm_name: $(prodVm3Name)-prv
        rg_name: '$(prodVm3ResourceGroupName)-prv'
